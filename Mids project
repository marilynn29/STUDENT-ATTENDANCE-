import java.util.*;

abstract class Person {
    protected String name;

    public Person(String name) {
        this.name = name;
    }    

    public abstract void displayDetails();
}

class Student extends Person {
    private String studentID;
    private String classSection;

    public Student(String studentID, String name, String classSection) {
        super(name);
        this.studentID = studentID;
        this.classSection = classSection;
    }

    public String getStudentID() {
        return studentID;
    }

    public String getClassSection() {
        return classSection;
    }

    @Override
    public void displayDetails() {
        System.out.println("Student ID: " + studentID);
        System.out.println("Name: " + name);
        System.out.println("Class Section: " + classSection);
    }
}

class AttendanceRecord {
    private String date;
    private Map<String, String> attendanceList; // Key: Student ID, Value: "Present"/"Absent"

    public AttendanceRecord(String date) {
        this.date = date;
        this.attendanceList = new HashMap<>();
    }

    public void markAttendance(String studentID, String status) {
        attendanceList.put(studentID, status);
    }

    public void viewRecords() {
        System.out.println("Attendance for Date: " + date);
        for (Map.Entry<String, String> entry : attendanceList.entrySet()) {
            System.out.println("Student ID: " + entry.getKey() + " - Status: " + entry.getValue());
        }
    }
}
class Teacher extends Person {
    private String teacherID;

    public Teacher(String teacherID, String name) {
        super(name);
        this.teacherID = teacherID;
    }

    public void takeAttendance(AttendanceRecord record, Student student, String status) {
        record.markAttendance(student.getStudentID(), status);
    }

    public void generateReport(AttendanceRecord record) {
        System.out.println("Attendance Report Generated by: " + name);
        record.viewRecords();
    }

    @Override
    public void displayDetails() {
        System.out.println("Teacher ID: " + teacherID);
        System.out.println("Name: " + name);
    }
}

class AttendanceManager {
    private List<Student> studentsList;
    private List<AttendanceRecord> attendanceRecords;

    public AttendanceManager() {
        studentsList = new ArrayList<>();
        attendanceRecords = new ArrayList<>();
    }

    public void addStudent(Student student) {
        studentsList.add(student);
        System.out.println("Student added: " + student.getStudentID());
    }

    public void markAttendance(String date, String studentID, String status) {
        AttendanceRecord record = getAttendanceRecordByDate(date);
        if (record == null) {
            record = new AttendanceRecord(date);
            attendanceRecords.add(record);
        }
        record.markAttendance(studentID, status);
    }

    public void searchStudent(String studentID) {
        for (Student student : studentsList) {
            if (student.getStudentID().equals(studentID)) {
                student.displayDetails();
                return;
            }
        }
        System.out.println("Student not found.");
    }

    private AttendanceRecord getAttendanceRecordByDate(String date) {
        for (AttendanceRecord record : attendanceRecords) {
            if (record.equals(date)) {
                return record;
            }
        }
        return null;
    }

    public void viewAttendanceRecords() {
        for (AttendanceRecord record : attendanceRecords) {
            record.viewRecords();
        }
    }
}

public class AttendanceSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        AttendanceManager manager = new AttendanceManager();

        Student student1 = new Student("S101", "Alice", "Class 10-A");
        Student student2 = new Student("S102", "Bob", "Class 10-B");

        manager.addStudent(student1);
        manager.addStudent(student2);

        Teacher teacher = new Teacher("T001", "Mr. Smith");

        System.out.println("\nMarking Attendance for 2024-04-10:");
        manager.markAttendance("2024-04-10", "S101", "Present");
        manager.markAttendance("2024-04-10", "S102", "Absent");

        System.out.println("\nViewing Attendance Records:");
        manager.viewAttendanceRecords();

        System.out.println("\nSearching for Student with ID S101:");
        manager.searchStudent("S101");

        System.out.println("\nTeacher Generating Report:");
        AttendanceRecord record = new AttendanceRecord("2024-04-10");
        teacher.takeAttendance(record, student1, "Present");
        teacher.takeAttendance(record, student2, "Absent");
        teacher.generateReport(record);

        scanner.close();
    }
}
